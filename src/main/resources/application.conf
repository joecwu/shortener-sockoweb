shortener-server {

  socko-server {
    hostname = "0.0.0.0"
    port = 8080
  }

}

akka {
  # Akka version, checked against the runtime version of Akka.
  version = "2.3.8"

  # Home directory of Akka, modules in the deploy directory will be loaded
  home = ""

  # Event handlers are created and registered synchronously during ActorSystem
  # start-up, and since they are actors, this timeout is used to bound the
  # waiting time
  event-handler-startup-timeout = 5s

  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "DEBUG"

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "DEBUG"

  # Filter of log events that is used by the LoggingAdapter before
  # publishing log events to the eventStream.
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  # Log the complete configuration at INFO level when the actor system is started.
  # This is useful when you are uncertain of what configuration is used.
  log-config-on-start = off

  # JVM shutdown, System.exit(-1), in case of a fatal error,
  # such as OutOfMemoryError
  jvm-exit-on-fatal-error = on

  actor {

    # FQCN of the ActorRefProvider to be used; the below is the built-in default,
    # another one is akka.remote.RemoteActorRefProvider in the akka-remote bundle.
    provider = "akka.actor.LocalActorRefProvider"

    # The guardian "/user" will use this class to obtain its supervisorStrategy.
    # It needs to be a subclass of akka.actor.SupervisorStrategyConfigurator.
    # In addition to the default there is akka.actor.StoppingSupervisorStrategy.
    guardian-supervisor-strategy = "akka.actor.DefaultSupervisorStrategy"

    # Timeout for ActorSystem.actorOf
    creation-timeout = 20s

    # Frequency with which stopping actors are prodded in case they had to be
    # removed from their parents
    reaper-interval = 5s

    # Serializes and deserializes (non-primitive) messages to ensure immutability,
    # this is only intended for testing.
    serialize-messages = off

    # Serializes and deserializes creators (in Props) to ensure that they can be
    # sent over the network, this is only intended for testing.
    serialize-creators = off

    # Timeout for send operations to top-level actors which are in the process
    # of being started. This is only relevant if using a bounded mailbox or the
    # CallingThreadDispatcher for a top-level actor.
    unstarted-push-timeout = 10s

    typed {
      # Default timeout for typed actor methods with non-void return type
      timeout = 5s
    }

    deployment {

      # deployment id pattern - on the format: /parent/child etc.
      default {

        # routing (load-balance) scheme to use
        # - available: "from-code", "round-robin", "random", "smallest-mailbox",
        #              "scatter-gather", "broadcast"
        # - or:        Fully qualified class name of the router class.
        #              The class must extend akka.routing.CustomRouterConfig and
        #              have a constructor with com.typesafe.config.Config
        #              parameter.
        # - default is "from-code";
        # Whether or not an actor is transformed to a Router is decided in code
        # only (Props.withRouter). The type of router can be overridden in the
        # configuration; specifying "from-code" means that the values specified
        # in the code shall be used.
        # In case of routing, the actors to be routed to can be specified
        # in several ways:
        # - nr-of-instances: will create that many children
        # - routees.paths: will look the paths up using actorFor and route to
        #   them, i.e. will not create children
        # - resizer: dynamically resizable number of routees as specified in
        #   resizer below
        router = "from-code"

        # number of children to create in case of a non-direct router;
        # this setting is ignored if routees.paths is given
        nr-of-instances = 10

        # within is the timeout used for routers containing future calls
        within = 5 seconds

        # number of virtual nodes per node for consistent-hashing router
        virtual-nodes-factor = 10

        routees {
          # Alternatively to giving nr-of-instances you can specify the full
          # paths of those actors which should be routed to. This setting takes
          # precedence over nr-of-instances
          paths = []
        }

        # Routers with dynamically resizable number of routees; this feature is
        # enabled by including (parts of) this section in the deployment
        resizer {

          enabled = off

          # The fewest number of routees the router should ever have.
          lower-bound = 1

          # The most number of routees the router should ever have.
          # Must be greater than or equal to lower-bound.
          upper-bound = 10

          # Threshold used to evaluate if a routee is considered to be busy
          # (under pressure). Implementation depends on this value (default is 1).
          # 0:   number of routees currently processing a message.
          # 1:   number of routees currently processing a message has
          #      some messages in mailbox.
          # > 1: number of routees with at least the configured pressure-threshold
          #      messages in their mailbox. Note that estimating mailbox size of
          #      default UnboundedMailbox is O(N) operation.
          pressure-threshold = 1

          # Percentage to increase capacity whenever all routees are busy.
          # For example, 0.2 would increase 20% (rounded up), i.e. if current
          # capacity is 6 it will request an increase of 2 more routees.
          rampup-rate = 0.2

          # Minimum fraction of busy routees before backing off.
          # For example, if this is 0.3, then we'll remove some routees only when
          # less than 30% of routees are busy, i.e. if current capacity is 10 and
          # 3 are busy then the capacity is unchanged, but if 2 or less are busy
          # the capacity is decreased.
          # Use 0.0 or negative to avoid removal of routees.
          backoff-threshold = 0.3

          # Fraction of routees to be removed when the resizer reaches the
          # backoffThreshold.
          # For example, 0.1 would decrease 10% (rounded up), i.e. if current
          # capacity is 9 it will request an decrease of 1 routee.
          backoff-rate = 0.1

          # When the resizer reduce the capacity the abandoned routee actors are
          # stopped with PoisonPill after this delay. The reason for the delay is
          # to give concurrent messages a chance to be placed in mailbox before
          # sending PoisonPill.
          # Use 0s to skip delay.
          stop-delay = 1s

          # Number of messages between resize operation.
          # Use 1 to resize before each message.
          messages-per-resize = 10
        }
      }


      # Default dispatcher for Actors that extend Stash
      default-stash-dispatcher {
        mailbox-type = "akka.dispatch.UnboundedDequeBasedMailbox"
      }

      default-dispatcher {
        # Must be one of the following
        # Dispatcher, (BalancingDispatcher, only valid when all actors using it are
        # of the same type), PinnedDispatcher, or a FQCN to a class inheriting
        # MessageDispatcherConfigurator with a constructor with
        # both com.typesafe.config.Config parameter and
        # akka.dispatch.DispatcherPrerequisites parameters.
        # PinnedDispatcher must be used toghether with executor=thread-pool-executor.
        type = "Dispatcher"

        # Which kind of ExecutorService to use for this dispatcher
        # Valid options:
        #  - "fork-join-executor" requires a "fork-join-executor" section
        #  - "thread-pool-executor" requires a "thread-pool-executor" section
        #  - A FQCN of a class extending ExecutorServiceConfigurator
        executor = "fork-join-executor"

        # This will be used if you have set "executor = "fork-join-executor""
        fork-join-executor {
          # Min number of threads to cap factor-based parallelism number to
          parallelism-min = 8

          # The parallelism factor is used to determine thread pool size using the
          # following formula: ceil(available processors * factor). Resulting size
          # is then bounded by the parallelism-min and parallelism-max values.
          parallelism-factor = 3.0

          # Max number of threads to cap factor-based parallelism number to
          parallelism-max = 64
        }

        # This will be used if you have set "executor = "thread-pool-executor""
        thread-pool-executor {
          # Keep alive time for threads
          keep-alive-time = 60s

          # Min number of threads to cap factor-based core number to
          core-pool-size-min = 8

          # The core pool size factor is used to determine thread pool core size
          # using the following formula: ceil(available processors * factor).
          # Resulting size is then bounded by the core-pool-size-min and
          # core-pool-size-max values.
          core-pool-size-factor = 3.0

          # Max number of threads to cap factor-based number to
          core-pool-size-max = 64

          # Minimum number of threads to cap factor-based max number to
          # (if using a bounded task queue)
          max-pool-size-min = 8

          # Max no of threads (if using a bounded task queue) is determined by
          # calculating: ceil(available processors * factor)
          max-pool-size-factor  = 3.0

          # Max number of threads to cap factor-based max number to
          # (if using a  bounded task queue)
          max-pool-size-max = 64

          # Specifies the bounded capacity of the task queue (< 1 == unbounded)
          task-queue-size = -1

          # Specifies which type of task queue will be used, can be "array" or
          # "linked" (default)
          task-queue-type = "linked"

          # Allow core threads to time out
          allow-core-timeout = on
        }

        # How long time the dispatcher will wait for new actors until it shuts down
        shutdown-timeout = 1s

        # Throughput defines the number of messages that are processed in a batch
        # before the thread is returned to the pool. Set to 1 for as fair as possible.
        throughput = 5

        # Throughput deadline for Dispatcher, set to 0 or negative for no deadline
        throughput-deadline-time = 0ms

        # If negative (or zero) then an unbounded mailbox is used (default)
        # If positive then a bounded mailbox is used and the capacity is set using
        # the property
        # NOTE: setting a mailbox to 'blocking' can be a bit dangerous, could lead
        # to deadlock, use with care
        # The following mailbox-push-timeout-time is only used for type=Dispatcher
        # and only if mailbox-capacity > 0
        mailbox-capacity = -1

        # Specifies the timeout to add a new message to a mailbox that is full -
        # negative number means infinite timeout. It is only used for type=Dispatcher
        # and only if mailbox-capacity > 0
        mailbox-push-timeout-time = 10s

        # FQCN of the MailboxType, if not specified the default bounded or unbounded
        # mailbox is used. The Class of the FQCN must have a constructor with
        # (akka.actor.ActorSystem.Settings, com.typesafe.config.Config) parameters.
        mailbox-type = ""

        # For BalancingDispatcher: If the balancing dispatcher should attempt to
        # schedule idle actors using the same dispatcher when a message comes in,
        # and the dispatchers ExecutorService is not fully busy already.
        attempt-teamwork = on

        # For Actor with Stash: The default capacity of the stash.
        # If negative (or zero) then an unbounded stash is used (default)
        # If positive then a bounded stash is used and the capacity is set using
        # the property
        stash-capacity = -1
      }

      default-mailbox {
        # FQCN of the MailboxType. The Class of the FQCN must have a public
        # constructor with
        # (akka.actor.ActorSystem.Settings, com.typesafe.config.Config) parameters.
        mailbox-type = "akka.dispatch.UnboundedMailbox"

        # If the mailbox is bounded then it uses this setting to determine its
        # capacity. The provided value must be positive.
        # NOTICE:
        # Up to version 2.1 the mailbox type was determined based on this setting;
        # this is no longer the case, the type must explicitly be a bounded mailbox.
        mailbox-capacity = 1000

        # If the mailbox is bounded then this is the timeout for enqueueing
        # in case the mailbox is full. Negative values signify infinite
        # timeout, which should be avoided as it bears the risk of dead-lock.
        mailbox-push-timeout-time = 10s

        # For Actor with Stash: The default capacity of the stash.
        # If negative (or zero) then an unbounded stash is used (default)
        # If positive then a bounded stash is used and the capacity is set using
        # the property
        stash-capacity = -1
      }

      mailbox {
        # Mapping between message queue semantics and mailbox configurations.
        # Used by akka.dispatch.RequiresMessageQueue[T] to enforce different
        # mailbox types on actors.
        # If your Actor implements RequiresMessageQueue[T], then when you create
        # an instance of that actor its mailbox type will be decided by looking
        # up a mailbox configuration via T in this mapping
        requirements {
          "akka.dispatch.UnboundedMessageQueueSemantics" =
            akka.actor.mailbox.unbounded-queue-based
          "akka.dispatch.BoundedMessageQueueSemantics" =
            akka.actor.mailbox.bounded-queue-based
          "akka.dispatch.DequeBasedMessageQueueSemantics" =
            akka.actor.mailbox.unbounded-deque-based
          "akka.dispatch.UnboundedDequeBasedMessageQueueSemantics" =
            akka.actor.mailbox.unbounded-deque-based
          "akka.dispatch.BoundedDequeBasedMessageQueueSemantics" =
            akka.actor.mailbox.bounded-deque-based
          "akka.dispatch.MultipleConsumerSemantics" =
            akka.actor.mailbox.unbounded-queue-based
          "akka.dispatch.ControlAwareMessageQueueSemantics" =
            akka.actor.mailbox.unbounded-control-aware-queue-based
          "akka.dispatch.UnboundedControlAwareMessageQueueSemantics" =
            akka.actor.mailbox.unbounded-control-aware-queue-based
          "akka.dispatch.BoundedControlAwareMessageQueueSemantics" =
            akka.actor.mailbox.bounded-control-aware-queue-based
        }

        unbounded-queue-based {
          # FQCN of the MailboxType, The Class of the FQCN must have a public
          # constructor with (akka.actor.ActorSystem.Settings,
          # com.typesafe.config.Config) parameters.
          mailbox-type = "akka.dispatch.UnboundedMailbox"
        }

        bounded-queue-based {
          # FQCN of the MailboxType, The Class of the FQCN must have a public
          # constructor with (akka.actor.ActorSystem.Settings,
          # com.typesafe.config.Config) parameters.
          mailbox-type = "akka.dispatch.BoundedMailbox"
        }

        unbounded-deque-based {
          # FQCN of the MailboxType, The Class of the FQCN must have a public
          # constructor with (akka.actor.ActorSystem.Settings,
          # com.typesafe.config.Config) parameters.
          mailbox-type = "akka.dispatch.UnboundedDequeBasedMailbox"
        }

        bounded-deque-based {
          # FQCN of the MailboxType, The Class of the FQCN must have a public
          # constructor with (akka.actor.ActorSystem.Settings,
          # com.typesafe.config.Config) parameters.
          mailbox-type = "akka.dispatch.BoundedDequeBasedMailbox"
        }

        unbounded-control-aware-queue-based {
          # FQCN of the MailboxType, The Class of the FQCN must have a public
          # constructor with (akka.actor.ActorSystem.Settings,
          # com.typesafe.config.Config) parameters.
          mailbox-type = "akka.dispatch.UnboundedControlAwareMailbox"
        }

        bounded-control-aware-queue-based {
          # FQCN of the MailboxType, The Class of the FQCN must have a public
          # constructor with (akka.actor.ActorSystem.Settings,
          # com.typesafe.config.Config) parameters.
          mailbox-type = "akka.dispatch.BoundedControlAwareMailbox"
        }
      }

      debug {
        # enable function of Actor.loggable(), which is to log any received message
        # at DEBUG level, see the “Testing Actor Systems” section of the Akka
        # Documentation at http://akka.io/docs
        receive = on

        # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill et.c.)
        autoreceive = on

        # enable DEBUG logging of actor lifecycle changes
        lifecycle = off

        # enable DEBUG logging of all LoggingFSMs for events, transitions and timers
        fsm = off

        # enable DEBUG logging of subscription changes on the eventStream
        event-stream = off

        # enable DEBUG logging of unhandled messages
        unhandled = off

        # enable WARN logging of misconfigured routers
        router-misconfiguration = off
      }

      # Entries for pluggable serializers and their bindings.
      serializers {
        java = "akka.serialization.JavaSerializer"
        bytes = "akka.serialization.ByteArraySerializer"

        akka-persistence-snapshot = "akka.persistence.serialization.SnapshotSerializer"
        akka-persistence-message = "akka.persistence.serialization.MessageSerializer"
      }

      # Class to Serializer binding. You only need to specify the name of an
      # interface or abstract base class of the messages. In case of ambiguity it
      # is using the most specific configured class, or giving a warning and
      # choosing the “first” one.
      #
      # To disable one of the default serializers, assign its class to "none", like
      # "java.io.Serializable" = none
      serialization-bindings {
        "[B" = bytes
        "java.io.Serializable" = java

        "akka.persistence.serialization.Snapshot" = akka-persistence-snapshot
        "akka.persistence.serialization.Message" = akka-persistence-message
      }

      # Configuration items which are used by the akka.actor.ActorDSL._ methods
      dsl {
        # Maximum queue size of the actor created by newInbox(); this protects
        # against faulty programs which use select() and consistently miss messages
        inbox-size = 1000

        # Default timeout to assume for operations like Inbox.receive et al
        default-timeout = 5s
      }
    }

    # Used to set the behavior of the scheduler.
    # Changing the default values may change the system behavior drastically so make
    # sure you know what you're doing! See the Scheduler section of the Akka
    # Documentation for more details.
    scheduler {
      # The LightArrayRevolverScheduler is used as the default scheduler in the
      # system. It does not execute the scheduled tasks on exact time, but on every
      # tick, it will run everything that is (over)due. You can increase or decrease
      # the accuracy of the execution timing by specifying smaller or larger tick
      # duration. If you are scheduling a lot of tasks you should consider increasing
      # the ticks per wheel.
      # Note that it might take up to 1 tick to stop the Timer, so setting the
      # tick-duration to a high value will make shutting down the actor system
      # take longer.
      tick-duration = 10ms

      # The timer uses a circular wheel of buckets to store the timer tasks.
      # This should be set such that the majority of scheduled timeouts (for high
      # scheduling frequency) will be shorter than one rotation of the wheel
      # (ticks-per-wheel * ticks-duration)
      # THIS MUST BE A POWER OF TWO!
      ticks-per-wheel = 512

      # This setting selects the timer implementation which shall be loaded at
      # system start-up.
      # The class given here must implement the akka.actor.Scheduler interface
      # and offer a public constructor which takes three arguments:
      #  1) com.typesafe.config.Config
      #  2) akka.event.LoggingAdapter
      #  3) java.util.concurrent.ThreadFactory
      implementation = akka.actor.LightArrayRevolverScheduler

      # When shutting down the scheduler, there will typically be a thread which
      # needs to be stopped, and this timeout determines how long to wait for
      # that to happen. In case of timeout the shutdown of the actor system will
      # proceed without running possibly still enqueued tasks.
      shutdown-timeout = 5s
    }

    io {

      # By default the select loops run on dedicated threads, hence using a
      # PinnedDispatcher
      pinned-dispatcher {
        type = "PinnedDispatcher"
        executor = "thread-pool-executor"
        thread-pool-executor.allow-core-pool-timeout = off
      }

      # In bytes, the size of the shared read buffer. In the span 0b..2GiB.
      #
      read-buffer-size = 8KiB

      # Specifies how many ops are done between every descriptor selection
      select-interval = 100

      # Number of connections that are allowed in the backlog.
      # 0 or negative means that the platform default will be used.
      default-backlog = 1000
    }
  }

  persistence {

    journal {

      # Maximum size of a persistent message batch written to the journal.
      max-message-batch-size = 200

      # Maximum size of a deletion batch written to the journal.
      max-deletion-batch-size = 10000

      # Path to the journal plugin to be used
      plugin = "akka.persistence.journal.leveldb"

      # In-memory journal plugin.
      inmem {

        # Class name of the plugin.
        class = "akka.persistence.journal.inmem.InmemJournal"

        # Dispatcher for the plugin actor.
        plugin-dispatcher = "akka.actor.default-dispatcher"
      }

      # LevelDB journal plugin.
      leveldb {

        # Class name of the plugin.
        class = "akka.persistence.journal.leveldb.LeveldbJournal"

        # Dispatcher for the plugin actor.
        plugin-dispatcher = "akka.persistence.dispatchers.default-plugin-dispatcher"

        # Dispatcher for message replay.
        replay-dispatcher = "akka.persistence.dispatchers.default-replay-dispatcher"

        # Storage location of LevelDB files.
        dir = "persistence/journal"

        # Use fsync on write
        fsync = on

        # Verify checksum on read.
        checksum = off

        # Native LevelDB (via JNI) or LevelDB Java port
        native = off
      }

      # Shared LevelDB journal plugin (for testing only).
      leveldb-shared {

        # Class name of the plugin.
        class = "akka.persistence.journal.leveldb.SharedLeveldbJournal"

        # Dispatcher for the plugin actor.
        plugin-dispatcher = "akka.actor.default-dispatcher"

        # timeout for async journal operations
        timeout = 10s

        store {

          # Dispatcher for shared store actor.
          store-dispatcher = "akka.persistence.dispatchers.default-plugin-dispatcher"

          # Dispatcher for message replay.
          replay-dispatcher = "akka.persistence.dispatchers.default-plugin-dispatcher"

          # Storage location of LevelDB files.
          dir = "persistence/journal"

          # Use fsync on write
          fsync = on

          # Verify checksum on read.
          checksum = off

          # Native LevelDB (via JNI) or LevelDB Java port
          native = on
        }
      }
    }

    snapshot-store {

      # Path to the snapshot store plugin to be used
      plugin = "akka.persistence.snapshot-store.local"

      # Local filesystem snapshot store plugin.
      local {

        # Class name of the plugin.
        class = "akka.persistence.snapshot.local.LocalSnapshotStore"

        # Dispatcher for the plugin actor.
        plugin-dispatcher = "akka.persistence.dispatchers.default-plugin-dispatcher"

        # Dispatcher for streaming snapshot IO.
        stream-dispatcher = "akka.persistence.dispatchers.default-stream-dispatcher"

        # Storage location of snapshot files.
        dir = "persistence/snapshots"
      }
    }

    view {

      # Automated incremental view update.
      auto-update = on

      # Interval between incremental updates
      auto-update-interval = 5s

      # Maximum number of messages to replay per incremental view update. Set to
      # -1 for no upper limit.
      auto-update-replay-max = -1
    }

    at-least-once-delivery {
      # Interval between redelivery attempts
      redeliver-interval = 600s

      # Maximum number of unconfirmed messages that will be sent in one redelivery burst
      redelivery-burst-limit = 10000

      # After this number of delivery attempts a `ReliableRedelivery.UnconfirmedWarning`
      # message will be sent to the actor.
      warn-after-number-of-unconfirmed-attempts = 5

      # Maximum number of unconfirmed messages that an actor with AtLeastOnceDelivery is
      # allowed to hold in memory.
      max-unconfirmed-messages = 100000
    }

    dispatchers {
      default-plugin-dispatcher {
        type = PinnedDispatcher
        executor = "thread-pool-executor"
      }
      default-replay-dispatcher {
        type = Dispatcher
        executor = "fork-join-executor"
        fork-join-executor {
          parallelism-min = 2
          parallelism-max = 8
        }
      }
      default-stream-dispatcher {
        type = Dispatcher
        executor = "fork-join-executor"
        fork-join-executor {
          parallelism-min = 2
          parallelism-max = 8
        }
      }
    }
  }
}